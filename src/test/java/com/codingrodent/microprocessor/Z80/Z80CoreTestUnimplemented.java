/*
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.codingrodent.microprocessor.Z80;

import com.codingrodent.microprocessor.ProcessorException;
import com.codingrodent.microprocessor.support.Z80IO;
import com.codingrodent.microprocessor.support.Z80Memory;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class Z80CoreTestUnimplemented {
    private Z80Core z80;
    private Z80Memory z80Memory;

    @BeforeEach
    public void setUp() {
        z80Memory = new Z80Memory("NAS_Test.nas");
        z80 = new Z80Core(z80Memory, new Z80IO());
        z80.reset();
    }

    @AfterEach
    public void tearDown() {
    }

    /**
     * Test for opcodes that should raise an unimplemented exception [ED Block]
     */
    @Test
    public final void testUnimplementedED() {

        int[] unimplemented = { //
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, //
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, //
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, //
                0x3, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, //
                0x77, 0x7F, //
                0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,//
                0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,//
                0xA4, 0xA5, 0xA6, 0xA7, 0xAC, 0xAD, 0xAE, 0xAF, //
                0xB4, 0xB5, 0xB6, 0xB7, 0xBC, 0xBD, 0xBE, 0xBF, //
                0xFF};
        // Initial setup
        for (int opcode : unimplemented) {
            int loc = 0xC000;
            z80.setProgramCounter(loc);
            z80Memory.writeByte(loc++, 0xED); // ED block
            z80Memory.writeByte(loc++, opcode); // Which ever op-code
            z80Memory.writeByte(loc, 0x76); // HALT
            boolean fault = false;
            try {

                run(0xC000);
            } catch (ProcessorException e) {
                fault = true;
            }
            assertTrue(fault);
        }
    }

    /**
     * Test for opcodes that should raise an unimplemented exception [ED Block]
     */
    @Test
    public final void testUnimplementedDD() {

        int[] unimplemented = { //
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, //
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, //
                0x20, 0x27, 0x28, 0x2F, //
                0x30, 0x31, 0x32, 0x33, 0x37, 0x38, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, //
                0x76, //
                0x80, 0x81, 0x82, 0x83, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8F, //
                0x90, 0x91, 0x92, 0x93, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9F, //
                0xA0, 0xA1, 0xA2, 0xA3, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAF, //
                0xB0, 0xB1, 0xB2, 0xB3, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBF, //
                0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCC, 0xCD, 0xCE, 0xCF, //
                0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, //
                0xE0, 0xE2, 0xE4, 0xE6, 0xE7, 0xE8, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, //
                0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, //
        };
        // Initial setup
        for (int opcode : unimplemented) {
            int loc = 0xC000;
            z80.setProgramCounter(loc);
            z80Memory.writeByte(loc++, 0xDD); // DD block
            z80Memory.writeByte(loc++, opcode); // Which ever op-code
            z80Memory.writeByte(loc, 0x76); // HALT
            boolean fault = false;
            try {
                run(0xC000);
            } catch (ProcessorException e) {
                fault = true;
            }
            assertTrue(fault);
        }
    }

    /**
     * Test for opcodes that should raise an unimplemented exception [FD Block]
     */
    @Test
    public final void testUnimplementedFD() {

        int[] unimplemented = { //
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, //
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, //
                0x20, 0x27, 0x28, 0x2F, //
                0x30, 0x31, 0x32, 0x33, 0x37, 0x38, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, //
                0x76, //
                0x80, 0x81, 0x82, 0x83, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8F, //
                0x90, 0x91, 0x92, 0x93, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9F, //
                0xA0, 0xA1, 0xA2, 0xA3, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAF, //
                0xB0, 0xB1, 0xB2, 0xB3, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBF, //
                0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCC, 0xCD, 0xCE, 0xCF, //
                0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, //
                0xE0, 0xE2, 0xE4, 0xE6, 0xE7, 0xE8, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, //
                0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, //
        };
        // Initial setup
        for (int opcode : unimplemented) {
            int loc = 0xC000;
            z80.setProgramCounter(loc);
            z80Memory.writeByte(loc++, 0xFD); // FD block
            z80Memory.writeByte(loc++, opcode); // Which ever op-code
            z80Memory.writeByte(loc, 0x76); // HALT
            boolean fault = false;
            try {
                run(0xC000);
            } catch (ProcessorException e) {
                fault = true;
            }
            assertTrue(fault);
        }
    }

    private void run(int address) throws ProcessorException { //
        // Ok, run the program
        z80.setProgramCounter(address);
        while (!z80.getHalt()) {
            // System.out.println(utilities.getWord(z80.getRegisterValue(RegisterNames.PC)));
            z80.executeOneInstruction();
        }
    }

}
